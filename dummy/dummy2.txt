To enable **login and authorization** for the "Upload" action in your React app, you need to:

1. ✅ Add a **Login system** (e.g., token-based auth).
2. ✅ Protect the **Upload** route so only logged-in users can access it.
3. ✅ Connect this to your **Navbar** so when clicking on "Upload", it checks if the user is logged in.

---

## ✅ Steps to Implement Auth with Protected Upload

---

### 📁 Folder structure example (React):

```
src/
├── components/
│   └── Navbar.js
├── pages/
│   └── Login.js
│   └── Upload.js
├── App.js
├── auth.js  ← (Token utilities)
```

---

### ✅ 1. `auth.js`: Utility to handle auth

```js
// src/auth.js
export const setToken = (token) => {
  localStorage.setItem('token', token);
};

export const getToken = () => {
  return localStorage.getItem('token');
};

export const isLoggedIn = () => {
  return !!getToken();
};

export const logout = () => {
  localStorage.removeItem('token');
};
```

---

### ✅ 2. `Login.js`: Simple login form

```jsx
// src/pages/Login.js
import React, { useState } from 'react';
import { setToken } from '../auth';
import { useNavigate } from 'react-router-dom';

const Login = () => {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const navigate = useNavigate();

  const handleLogin = async (e) => {
    e.preventDefault();
    try {
      const res = await fetch('http://localhost:5000/api/login', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ username, password })
      });

      if (!res.ok) throw new Error('Login failed');
      const data = await res.json();
      setToken(data.token); // Save token in localStorage
      navigate('/upload');
    } catch (err) {
      alert(err.message);
    }
  };

  return (
    <form onSubmit={handleLogin}>
      <h2>Login</h2>
      <input placeholder="Username" value={username} onChange={(e) => setUsername(e.target.value)} />
      <input type="password" placeholder="Password" value={password} onChange={(e) => setPassword(e.target.value)} />
      <button type="submit">Login</button>
    </form>
  );
};

export default Login;
```

---

### ✅ 3. `Upload.js`: Protected upload page

```jsx
// src/pages/Upload.js
import React, { useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { isLoggedIn } from '../auth';

const Upload = () => {
  const navigate = useNavigate();

  useEffect(() => {
    if (!isLoggedIn()) {
      navigate('/login');
    }
  }, [navigate]);

  return (
    <div>
      <h2>Upload Page (Protected)</h2>
      {/* Your upload form goes here */}
    </div>
  );
};

export default Upload;
```

---

### ✅ 4. `Navbar.js`: Link to Upload

Update your Navbar to use React Router’s `Link` and check auth status:

```jsx
import { Link } from 'react-router-dom';
import './Navbar.css';
import linkedin from '../../assets/linkedin.svg';
import whatsapp from '../../assets/whatsapp.png';
import git from '../../assets/git.png';
import { isLoggedIn, logout } from '../../auth';

const Navbar = () => {
  return (
    <nav className="navbar">
        <ul className="navbar-prof-logo">
            <li><img src={linkedin} alt='linkedin'/></li>
            <li><img src={git} alt='git'/></li>
            <li><img src={whatsapp} alt='whatsapp'/></li>
        </ul>
        <ul className="navbar-links">
            <li><h3>About</h3></li>
            <li><h3>Projects</h3></li>
            <li><h3>Skills</h3></li>
            <li>
              <h3>
                {isLoggedIn() ? (
                  <Link to="/upload">Upload</Link>
                ) : (
                  <Link to="/login">Upload</Link>
                )}
              </h3>
            </li>
            <li><h3>Contact</h3></li>
            {isLoggedIn() && (
              <li><button onClick={logout}>Logout</button></li>
            )}
        </ul>
    </nav>
  );
};

export default Navbar;
```

---

### ✅ 5. `App.js`: Add routing

```jsx
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import Navbar from './components/Navbar';
import Login from './pages/Login';
import Upload from './pages/Upload';

function App() {
  return (
    <Router>
      <Navbar />
      <Routes>
        <Route path="/login" element={<Login />} />
        <Route path="/upload" element={<Upload />} />
      </Routes>
    </Router>
  );
}

export default App;
```

---

### ✅ 6. Backend Example (Express Login Route)

Add to your Node server:

```js
const express = require('express');
const jwt = require('jsonwebtoken');
const router = express.Router();

const SECRET = 'your-secret-key';

router.post('/api/login', (req, res) => {
  const { username, password } = req.body;

  // Replace with real authentication logic
  if (username === 'admin' && password === '1234') {
    const token = jwt.sign({ username }, SECRET, { expiresIn: '1h' });
    return res.json({ token });
  }

  res.status(401).send('Invalid credentials');
});

module.exports = router;
```

Mount in your server:

```js
const loginRoutes = require('./routes/loginRoutes');
app.use(loginRoutes);
```

---

Would you like me to generate the `Upload` form with token authorization for the API call as well?

yes

Great! Here's a full **upload form** in React that:

* ✅ Only allows **authenticated users** to upload.
* ✅ Sends the file to your `/images/upload` or `/docs/docupload` API.
* ✅ Includes the **JWT token** in the request header for authorization.

---

## ✅ React Upload Component (with Auth Token)

### 📄 `Upload.js` (Updated Protected Upload Page)

```jsx
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { getToken, isLoggedIn } from '../auth';
import axios from 'axios';

const Upload = () => {
  const [file, setFile] = useState(null);
  const [type, setType] = useState('image'); // 'image' or 'doc'
  const [uploadUrl, setUploadUrl] = useState('');
  const navigate = useNavigate();

  useEffect(() => {
    if (!isLoggedIn()) {
      navigate('/login');
    }
  }, [navigate]);

  const handleUpload = async () => {
    if (!file) {
      alert('Please select a file');
      return;
    }

    const formData = new FormData();
    formData.append(type === 'image' ? 'image' : 'doc', file);

    const url =
      type === 'image'
        ? 'http://localhost:5000/images/upload'
        : 'http://localhost:5000/docs/docupload';

    try {
      const res = await axios.post(url, formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
          Authorization: `Bearer ${getToken()}`
        }
      });

      setUploadUrl(res.data.url);
      alert('Upload successful!');
    } catch (err) {
      console.error(err);
      alert(err.response?.data || 'Upload failed');
    }
  };

  return (
    <div>
      <h2>Upload Page (Protected)</h2>

      <label>
        Select Type:
        <select value={type} onChange={(e) => setType(e.target.value)}>
          <option value="image">Image</option>
          <option value="doc">Document</option>
        </select>
      </label>

      <br />

      <input type="file" onChange={(e) => setFile(e.target.files[0])} />

      <button onClick={handleUpload}>Upload</button>

      {uploadUrl && (
        <div>
          <p>Uploaded File URL:</p>
          <a href={uploadUrl} target="_blank" rel="noreferrer">{uploadUrl}</a>
        </div>
      )}
    </div>
  );
};

export default Upload;
```

---

## ✅ Backend: Add Auth Middleware for Upload Routes

If you're securing your upload routes, you need to **verify the JWT** on the backend.

### 📄 `middleware/auth.js`

```js
const jwt = require('jsonwebtoken');
const SECRET = 'your-secret-key'; // Use the same key as in your login route

const verifyToken = (req, res, next) => {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1]; // Bearer <token>

  if (!token) return res.status(401).send('Access denied. No token provided.');

  try {
    const decoded = jwt.verify(token, SECRET);
    req.user = decoded;
    next();
  } catch (err) {
    res.status(403).send('Invalid token');
  }
};

module.exports = verifyToken;
```

### 📄 In `imageRoutes.js` and `docRoutes.js`:

At the top:

```js
const verifyToken = require('../middleware/auth');
```

Update your route:

```js
router.post('/upload', verifyToken, upload.single('image'), async (req, res) => {
  ...
});
```

Same for `/docupload`.

---

## ✅ Summary

| Task                     | Status |
| ------------------------ | ------ |
| User login & token setup | ✅ Done |
| Protect upload page      | ✅ Done |
| Include token in upload  | ✅ Done |
| Secure backend routes    | ✅ Done |

---

Would you like a `Register` page too, or want this to redirect unauthenticated users to login automatically?
